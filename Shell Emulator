import os
import tarfile
import csv

class ShellEmulator:
    def __init__(self, config_file):
        # Инициализация эмулятора и загрузка конфигурации
        self.load_config(config_file)
        self.current_dir = '/'  # Устанавливаем текущую директорию в корень
        self.fs = {}  # Пустой словарь для хранения файловой системы
        self.load_filesystem()  # Загрузка файловой системы из архива

    def load_config(self, config_file):
        # Загрузка конфигурации из CSV-файла
        with open(config_file, 'r') as file:
            reader = csv.DictReader(file)
            config = next(reader)  # Читаем первую (и единственную) строку
        self.hostname = config['Имя компьютера']  # Имя компьютера для приглашения
        self.fs_path = config['Путь к архиву виртуальной файловой системы']  # Путь к tar-архиву
        self.startup_script = config['Путь к стартовому скрипту']  # Путь к стартовому скрипту

    def load_filesystem(self):
        # Загрузка файловой системы из tar-архива
        with tarfile.open(self.fs_path, 'r') as tar:
            for member in tar.getmembers():
                # Добавляем информацию о каждом файле или директории в словарь fs
                self.fs[member.name] = {
                    'type': 'dir' if member.isdir() else 'file',  # Определяем тип (файл или директория)
                    'content': tar.extractfile(member).read().decode() if member.isfile() else '',  # Содержимое файла
                    'owner': 'root'  # Устанавливаем владельца по умолчанию
                }

    def execute_command(self, command):
        # Обработка введенной команды
        parts = command.strip().split()  # Разбиваем команду на части
        if not parts:
            return  # Если команда пустая, ничего не делаем

        cmd = parts[0]  # Первая часть — это сама команда
        args = parts[1:]  # Остальное — аргументы

        # Вызов соответствующего метода для команды
        if cmd == 'ls':
            self.ls(args)
        elif cmd == 'cd':
            self.cd(args)
        elif cmd == 'cat':
            self.cat(args)
        elif cmd == 'chown':
            self.chown(args)
        elif cmd == 'exit':
            exit(0)  # Завершение работы
        else:
            print(f"Unknown command: {cmd}")  # Сообщение об неизвестной команде

    def ls(self, args):
        # Реализация команды ls
        path = self.resolve_path(args[0] if args else self.current_dir)  # Получаем путь
        if path not in self.fs or self.fs[path]['type'] != 'dir':
            # Проверка, что путь существует и это директория
            print(f"ls: cannot access '{path}': No such directory")
            return

        for name in sorted(self.fs.keys()):
            # Выводим содержимое директории
            if name.startswith(path) and name != path:
                print(os.path.basename(name))

    def cd(self, args):
        # Реализация команды cd
        if not args:
            print("cd: missing operand")  # Если аргумент отсутствует
            return

        path = self.resolve_path(args[0])  # Получаем путь
        if path not in self.fs or self.fs[path]['type'] != 'dir':
            # Проверяем, что путь существует и это директория
            print(f"cd: {args[0]}: No such directory")
            return

        self.current_dir = path  # Обновляем текущую директорию

    def cat(self, args):
        # Реализация команды cat
        if not args:
            print("cat: missing file operand")  # Если аргумент отсутствует
            return

        path = self.resolve_path(args[0])  # Получаем путь
        if path not in self.fs or self.fs[path]['type'] != 'file':
            # Проверяем, что путь существует и это файл
            print(f"cat: {args[0]}: No such file")
            return

        print(self.fs[path]['content'])  # Выводим содержимое файла

    def chown(self, args):
        # Реализация команды chown
        if len(args) < 2:
            print("chown: missing operand")  # Если недостаточно аргументов
            return

        owner, path = args[0], self.resolve_path(args[1])  # Получаем владельца и путь
        if path not in self.fs:
            # Проверяем, что путь существует
            print(f"chown: {args[1]}: No such file or directory")
            return

        self.fs[path]['owner'] = owner  # Изменяем владельца файла или директории

    def resolve_path(self, path):
        # Преобразование пути в абсолютный
        if path.startswith('/'):
            return path.rstrip('/')  # Если путь абсолютный, возвращаем его
        return os.path.normpath(f"{self.current_dir}/{path}").rstrip('/')  # Формируем абсолютный путь

    def run_startup_script(self):
        # Выполнение стартового скрипта
        with open(self.startup_script, 'r') as script:
            for line in script:
                self.execute_command(line.strip())  # Выполняем команды из скрипта

    def start(self):
        # Запуск эмулятора
        self.run_startup_script()  # Выполняем стартовый скрипт
        while True:
            command = input(f"{self.hostname}:{self.current_dir}$ ")  # Отображение приглашения
            self.execute_command(command)  # Обработка команды

if __name__ == "__main__":
    emulator = ShellEmulator('config.csv')  # Инициализация эмулятора с конфигурацией
    emulator.start()  # Запуск
